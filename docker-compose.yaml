volumes:
  db_storage:
    external: true
  n8n_storage:
    external: true
  traefik_storage:
    external: true
  baserow_storage:
    external: true
  redis_storage:
  evolution_store:
  evolution_instances:

x-logging: &default-logging
  options:
    max-size: "10m"
    max-file: "5"
#    compress: "true"
  driver: json-file

x-shared: &shared
  restart: unless-stopped
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    # - N8N_BASIC_AUTH_ACTIVE=false
    # - N8N_PROTOCOL=https
    - GENERIC_TIMEZONE=${TIMEZONE}
    - TZ=${TIMEZONE}
    - WEBHOOK_URL=https://${N8N_HOST}
    - QUEUE_BULL_REDIS_HOST=redis
    - N8N_ENCRYPTION_KEY=%{N8N_ENCRYPTION_KEY}
    - EXECUTIONS_MODE=queue
    - N8N_QUEUE_TYPE=redis
    - N8N_QUEUE_HOST=redis
    - N8N_QUEUE_PORT=6379
    - N8N_QUEUE_NAME=n8n
  links:
    - postgres
    - redis
    # - traefik
  volumes:
    - n8n_storage:/home/node/.n8n
  networks:
    - n8n-net
  logging: *default-logging
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  evolution-api:
    container_name: n8n-evolution_api
    image: ${EVOLUTION_IMAGE}
    restart: unless-stopped
    logging: *default-logging
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - evolution_store:/evolution/store
      - evolution_instances:/evolution/instances

  # https-portal:
  #   image: steveltn/https-portal:1
  #   container_name: n8n-https-portal
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   links:
  #     - n8n
  #   restart: unless-stopped
  #   environment:
  #     DOMAINS: '${N8N_HOST} -> http://n8n:5678'
  #     STAGE: ${STAGE:-staging}
  #     FORCE_RENEW: 'true'
  #     CUSTOM_NGINX_SERVER_CONFIG_BLOCK: |
  #         proxy_buffering off;

  # baserow:
  #   image: ${BASEROW_IMAGE}
  #   container_name: n8n-baserow
  #   logging: *default-logging
  #   networks:
  #     - n8n-net
  #   volumes:
  #     - baserow_storage:/baserow/data
  #   ports:
  #     - 80:80
  #     - 443:443
  #   environment:
  #     - BASEROW_PUBLIC_URL=${BASEROW_PUBLIC_URL}
  #   deploy:
  #     # mode: replicated
  #     # replicas: 1
  #     # placement:
  #     #   constraints:
  #     #     - node.role == manager
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: 1024M
  #     # labels:
  #     #   - traefik.enable=true
  #     #   - traefik.http.routers.baserow.rule=Host(`baserow.SEU_DOMINIO.com.br`)
  #     #   - traefik.http.routers.baserow.entrypoints=websecure
  #     #   - traefik.http.routers.baserow.tls.certresolver=le
  #     #   - traefik.http.routers.baserow.service=baserow
  #     #   - traefik.http.services.baserow.loadbalancer.server.port=80

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: n8n-postgresql
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data:rw
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    logging: *default-logging
    networks:
      - n8n-net

  redis:
    image: ${REDIS_IMAGE}
    container_name: n8n-redis
    restart: unless-stopped
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    logging: *default-logging
    networks:
      - n8n-net

  # traefik:
  #   logging: *default-logging
  #   image: ${TRAEFIK_IMAGE}
  #   container_name: n8n-traefik
  #   restart: unless-stopped
  #   command:
  #     - --log.level=ERROR
  #     - --api=true
  #     - --api.insecure=true
  #     - --providers.docker=true
  #     - --providers.docker.exposedbydefault=false
  #     - --entrypoints.web.address=:80
  #     - --entrypoints.web.http.redirections.entryPoint.to=websecure
  #     - --entrypoints.web.http.redirections.entrypoint.scheme=https
  #     - --entrypoints.websecure.address=:443
  #     - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true
  #     - --certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}
  #     - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - traefik_storage:/letsencrypt
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   networks:
  #     - n8n-net

  n8n:
    <<: *shared
    image: ${N8N_IMAGE}
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: n8n-master
    # labels:
    #   - traefik.enable=true
    #   # - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
    #   - traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)
    #   - traefik.http.routers.n8n.tls=true
    #   - traefik.http.routers.n8n.entrypoints=web,websecure
    #   - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
    #   - traefik.http.middlewares.n8n.headers.SSLRedirect=true
    #   - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
    #   - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
    #   - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
    #   - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
    #   - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
    #   - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
    #   - traefik.http.middlewares.n8n.headers.STSPreload=true
    #   - traefik.http.routers.n8n.middlewares=n8n@docker
    #   - traefik.enable=true
    # command: ["start", "--tunnel"]
    # command: ["start"]
    ports:
      - 5678:5678

  n8n-worker:
    <<: *shared
    image: ${N8N_IMAGE}
    container_name: n8n-worker
    command: worker
    depends_on:
      - n8n

networks:
  n8n-net:
    driver: bridge
